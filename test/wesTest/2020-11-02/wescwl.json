{
    "name": "wes.cwl",
    "content": "cwlVersion: v1.0\n\ndoc: | \n  This workflow is used to process in DG4VN project \n\nclass: Workflow\nid: mash_workflow\nrequirements:\n  - class: StepInputExpressionRequirement\n\ninputs:\n  input_fastqs:\n    type: File[]\n  input_fastqs1:\n    type: File[]\n  input_fastqs2:\n    type: File[]\n  padding_bed: \n    type: File\n  indexed_reference_fasta:\n    type: File \n    secondaryFiles: [.64.amb, .64.ann, .64.bwt, .64.pac, .64.sa, .64.alt, .dict, .fai]\n  indexed_reference_dpsnp_hg38:\n    type: File\n  output_basename: string\n\noutputs:\n  vcf_calling:\n    type: File \n    outputSource: GenotypeGVCF/output\n\nsteps:\n  QCFastq:\n    run: QCFastq.cwl\n    in:\n      input_fastqs: input_fastqs\n    out:\n      [output]\n\n  AlignmentReads:\n    run: AlignBwaMem.cwl \n    in: \n      input_fastqs1: input_fastqs1\n      input_fastqs2: input_fastqs2\n      indexed_reference_fasta: indexed_reference_fasta\n      output_aligned_reads:\n        source: output_basename\n        valueFrom: $(self + \"_hg38_mapped.bam\")\n    out:\n      [output]\n  \n  FastqToBam:\n    run: Fastq2Bam.cwl \n    in:\n      input_fastqs1: input_fastqs1\n      input_fastqs2: input_fastqs2\n      output_basename: output_basename\n      output_fastq2bam_bam:\n        source: output_basename\n        valueFrom: $(self + \"_hg38_unmapped.bam\")\n    out:\n      [output]\n\n  MergeBamAlignment: \n    run: MergeBamAlignment.cwl\n    in:\n      aligned_bam: AlignmentReads/output\n      unaligned_bam: FastqToBam/output\n      indexed_reference_fasta: indexed_reference_fasta\n      output_merged_bam:\n        source: output_basename\n        valueFrom: $(self + \"_hg38_fin.bam\")\n    out:\n      [output]\n\n  MarkDuplicates: \n    run: MarkDuplicates.cwl \n    in: \n      input_bam: MergeBamAlignment/output\n      output_md_bam:\n        source: output_basename\n        valueFrom: $(self + \"_hg38_marked.bam\")\n      output_report_txt:\n        source: output_basename\n        valueFrom: $(self + \".bam.txt\")\n    out:\n      [output]\n    \n  SortBam: \n    run: SortBam.cwl \n    in: \n      input_bam: MarkDuplicates/output\n      output_sorted_bam:\n        source: output_basename \n        valueFrom: $(self + \"_hg38_sorted.bam\")\n    out: \n      [output]\n\n  RecalibrateBQSR: \n    run: RecalibrateBQSR.cwl \n    in: \n      input_bam: SortBam/output\n      indexed_reference_fasta: indexed_reference_fasta\n      indexed_reference_dpsnp_hg38: indexed_reference_dpsnp_hg38\n      output_recalibrate_bqsr:\n        source: output_basename\n        valueFrom: $(self + \"_hg38_recal.table\")\n    out:\n      [output]\n\n  ApplyBQSR: \n    run: ApplyBQSR.cwl \n    in: \n      input_bam: SortBam/output\n      input_recalibrate_bqsr:  RecalibrateBQSR/output\n      indexed_reference_fasta: indexed_reference_fasta\n      output_apply_bqsr: \n        source: output_basename\n        valueFrom: $(self + \"_hg38_arr.bam\")\n    out:\n      [output]\n\n  VariantCalling: \n    run: VariantCalling.cwl \n    in: \n      input_bam: ApplyBQSR/output\n      padding_bed: padding_bed\n      indexed_reference_fasta: indexed_reference_fasta\n      output_variant_calling: \n        source: output_basename\n        valueFrom: $(self + \"_HL_hg38.g.vcf\")\n    out:\n      [output]\n  \n  GenotypeGVCF: \n    run: GenotypeGVCF.cwl \n    in: \n      variant_calling: VariantCalling/output\n      indexed_reference_fasta: indexed_reference_fasta\n      output_vcf: \n        source: output_basename\n        valueFrom: $(self + \"_HL_hg38.vcf\")\n    out:\n      [output]\n",
    "steps": [
        {
            "name": "AlignBwaMem.cwl",
            "content": "cwlVersion: v1.0\n\nclass: CommandLineTool \nid: align_bwa_mem \n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: vinbdi/biotools\n  - class: ResourceRequirement\n    ramMin: 4096\n    coresMin: 4\n\ninputs:\n  input_fastqs1:\n    type: File[]\n  input_fastqs2:\n    type: File[]\n  indexed_reference_fasta: \n    type: File \n    secondaryFiles: [.64.amb, .64.ann, .64.bwt, .64.pac, .64.sa, .64.alt, .dict, .fai]\n  output_aligned_reads:\n    type: string\n\noutputs:\n  output: \n    type: File \n    outputBinding:\n      glob: '*.bam'\n      \narguments: \n  - position: 0\n    shellQuote: false \n    valueFrom: >- \n      $(inputs.indexed_reference_fasta) $(inputs.input_fastqs1) $(inputs.input_fastqs2) | samtools view -Shb -o $(inputs.output_aligned_reads) -\nbaseCommand: [bwa, mem]\n"
        },
        {
            "name": "ApplyBQSR.cwl",
            "content": "cwlVersion: v1.0\n\nclass: CommandLineTool\nid: sort_bam\nrequirements:\n  - class: DockerRequirement\n    dockerPull: vinbdi/biotools\n  - class: ResourceRequirement \n    ramMin: 2000\n\ninputs:\n  input_bam: \n    type: File\n  indexed_reference_fasta:\n    type: File \n    secondaryFiles: [.64.amb, .64.ann, .64.bwt, .64.pac, .64.sa, .64.alt, .dict, .fai]\n  input_recalibrate_bqsr:\n    type: File\n  output_apply_bqsr:\n    type: string \n  \noutputs:\n  output: \n    type: File \n    outputBinding:\n      glob: '*.bam'\n    secondaryFiles: [^.bai, ^.bam.md5]\n\narguments:\n  - position: 0\n    shellQuote: false \n    valueFrom: >- \n      -R $(inputs.indexed_reference_fasta) -I $(inputs.input_bam) -bqsr $(inputs.input_recalibrate_bqsr) -O $(inputs.output_apply_bqsr)\n\nbaseCommand: [gatk, ApplyBQSR]\n"
        },
        {
            "name": "Fastq2Bam.cwl",
            "content": "cwlVersion: v1.0\n\nclass: CommandLineTool \nid: fastq_to_bam \n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: vinbdi/biotools\n  - class: ResourceRequirement\n    ramMin: 4096\n    coresMin: 4\n\ninputs:\n  input_fastqs1:\n    type: File[]\n  input_fastqs2:\n    type: File[]\n  output_basename:\n    type: string\n  output_fastq2bam_bam:\n    type: string\n\noutputs:\n  output: \n    type: File \n    outputBinding:\n      glob: '*unmapped.bam'\n      \narguments: \n  - position: 0\n    shellQuote: false \n    valueFrom: >- \n      SM=$(inputs.output_basename) RG=$(inputs.output_basename)  LIBRARY_NAME=lib1 PLATFORM=ILLUMINA F1=$(inputs.input_fastqs1) F2=$(input.input_fastqs2) O=$(input.output_fastq2bam_bam)\nbaseCommand: [picard, FastqToSam]\n"
        },
        {
            "name": "GenotypeGVCF.cwl",
            "content": "cwlVersion: v1.0\n\nclass: CommandLineTool\nid: sort_bam\nrequirements:\n  - class: DockerRequirement\n    dockerPull: vinbdi/biotools\n  - class: ResourceRequirement \n    ramMin: 2000\n\ninputs:\n  variant_calling: \n    type: File\n  indexed_reference_fasta:\n    type: File \n    secondaryFiles: [.64.amb, .64.ann, .64.bwt, .64.pac, .64.sa, .64.alt, .dict, .fai]\n  output_vcf:\n    type: string \n  \noutputs:\n  output: \n    type: File \n    outputBinding:\n      glob: '*.vcf'\n    secondaryFiles: [^.tbi, ^.vcf.md5]\n\narguments:\n  - position: 0\n    shellQuote: false \n    valueFrom: >- \n      -R $(inputs.indexed_reference_fasta) -V $(inputs.variant_calling) -O $(input.output_vcf)\n\nbaseCommand: [gatk, GenotypeGVCFs]\n"
        },
        {
            "name": "MarkDuplicate.cwl",
            "content": "cwlVersion: v1.0\n\nclass: CommandLineTool\nid: fix_mate\nrequirements:\n  - class: DockerRequirement\n    dockerPull: vinbdi/biotools\n  - class: ResourceRequirement \n    ramMin: 2000\n\ninputs:\n  input_bam: \n    type: File\n  output_md_bam:\n    type: string \n  \noutputs:\n  output: \n    type: File \n    outputBinding:\n      glob: '*.bam$'\n    secondaryFiles: [^.bai, ^.bam.md5]\n\narguments:\n  - position: 0\n    shellQuote: false \n    valueFrom: >- \n      I=$(inputs.input_sam) O=$(inputs.output_fixmate_bam) M=$(inputs.output_fixmate_bam).txt VALIDATION_STRINGENCY=SILENT OPTICAL_DUPLICATE_PIXEL_DISTANCE=2500 ASSUME_SORT_ORDER=queryname CREATE_MD5_FILE=false\n\nbaseCommand: [picard, MarkDuplicates]\n"
        },
        {
            "name": "MarkDuplicates.cwl",
            "content": "cwlVersion: v1.0\n\nclass: CommandLineTool\nid: fix_mate\nrequirements:\n  - class: DockerRequirement\n    dockerPull: vinbdi/biotools\n  - class: ResourceRequirement \n    ramMin: 2000\n\ninputs:\n  input_bam: \n    type: File\n  output_md_bam:\n    type: string \n  output_report_txt:\n    type: string\n  \noutputs:\n  output: \n    type: File \n    outputBinding:\n      glob: '*.bam$'\n    secondaryFiles: [^.bai, ^.bam.md5]\n\narguments:\n  - position: 0\n    shellQuote: false \n    valueFrom: >- \n      I=$(inputs.input_bam) O=$(input.output_md_bam)  M=$(inputs.output_report_txt) ASO=queryname TMP_DIR=tmp\n\nbaseCommand: [picard, MarkDuplicates]\n"
        },
        {
            "name": "MergeBamAlignment.cwl",
            "content": "cwlVersion: v1.0\n\nclass: CommandLineTool \nid: merge_bam_alignment \n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: vinbdi/biotools\n  - class: ResourceRequirement\n    ramMin: 4096\n    coresMin: 4\n\ninputs:\n  aligned_bam:\n    type: File\n  unaligned_bam:\n    type: File\n  indexed_reference_fasta:\n    type: File\n    secondaryFiles: [.64.amb, .64.ann, .64.bwt, .64.pac, .64.sa, .64.alt, .dict, .fai]\n  output_merged_bam:\n    type: string\n\noutputs:\n  output: \n    type: File \n    outputBinding:\n      glob: '*.bam'\n      \narguments: \n  - position: 0\n    shellQuote: false \n    valueFrom: >- \n      ALIGNED=$(inputs.aligned_bam) UNMAPPED=$(inputs.unaligned_bam) O=$(inputs.output_merged_bam) R=$(inputs.indexed_reference_fasta)\nbaseCommand: [picard, MergeBamAlignment]"
        },
        {
            "name": "QCFastq.cwl",
            "content": "cwlVersion: v1.0\n\nclass: CommandLineTool \nid: qc_fastq \n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: vinbdi/biotools\n  - class: ResourceRequirement\n    ramMin: 4096\n    coresMin: 4\n\ninputs:\n  input_fastqs:\n    type: File[]\n  \n\noutputs:\n  output: \n    type: File \n    outputBinding:\n      glob: '*.zip'\n      \narguments: \n  - position: 0\n    shellQuote: false \n    valueFrom: >- \n      $(inputs.input_fastqs) -o .\nbaseCommand: [fastqc]  "
        },
        {
            "name": "RecalibrateBQSR.cwl",
            "content": "cwlVersion: v1.0\n\nclass: CommandLineTool\nid: sort_bam\nrequirements:\n  - class: DockerRequirement\n    dockerPull: vinbdi/biotools\n  - class: ResourceRequirement \n    ramMin: 2000\n\ninputs:\n  input_bam: \n    type: File\n  indexed_reference_fasta: \n    type: File \n    secondaryFiles: [.64.amb, .64.ann, .64.bwt, .64.pac, .64.sa, .64.alt, .dict, .fai]\n  indexed_reference_dpsnp_hg38:\n    type: File\n  output_recalibrate_bqsr:\n    type: string \n  \noutputs:\n  output: \n    type: File \n    outputBinding:\n      glob: '*.recal.table'\n\narguments:\n  - position: 0\n    shellQuote: false \n    valueFrom: >- \n      -R $(inputs.indexed_reference_fasta) --use-original-qualities -I $(inputs.input_bam)  --known-sites $(inputs.indexed_reference_dpsnp_hg38) -O $(input.output_recalibrate_bqsr)\n\nbaseCommand: [gatk, BaseRecalibrator]\n"
        },
        {
            "name": "SortBam.cwl",
            "content": "cwlVersion: v1.0\n\nclass: CommandLineTool\nid: sort_bam\nrequirements:\n  - class: DockerRequirement\n    dockerPull: vinbdi/biotools\n  - class: ResourceRequirement \n    ramMin: 2000\n\ninputs:\n  input_bam: \n    type: File\n  output_sorted_bam:\n    type: string \n  \noutputs:\n  output: \n    type: File \n    outputBinding:\n      glob: '*.bam'\n    secondaryFiles: [^.bai, ^.bam.md5]\n\narguments:\n  - position: 0\n    shellQuote: false \n    valueFrom: >- \n      I=$(inputs.input_bam) O=$(inputs.output_sorted_bam) SO=coordinate CREATE_INDEX=true CREATE_MD5_FILE=false\n\nbaseCommand: [picard, SortSam]\n"
        },
        {
            "name": "VariantCalling.cwl",
            "content": "cwlVersion: v1.0\n\nclass: CommandLineTool\nid: sort_bam\nrequirements:\n  - class: DockerRequirement\n    dockerPull: vinbdi/biotools\n  - class: ResourceRequirement \n    ramMin: 2000\n\ninputs:\n  input_bam: \n    type: File\n  padding_bed:\n    type: File\n  indexed_reference_fasta:\n    type: File \n    secondaryFiles: [.64.amb, .64.ann, .64.bwt, .64.pac, .64.sa, .64.alt, .dict, .fai]\n  output_variant_calling:\n    type: string \n  \noutputs:\n  output: \n    type: File \n    outputBinding:\n      glob: '*.vcf$'\n    secondaryFiles: [^.tbi, ^.vcf.md5]\n\narguments:\n  - position: 0\n    shellQuote: false \n    valueFrom: >- \n      -R $(inputs.indexed_reference_fasta) -L $(inputs.padding_bed) -I $(inputs.input_bam) -O $(input.output_variant_calling) -ERC GVCF\n\nbaseCommand: [gatk, HaplotypeCaller]\n"
        }
    ]
}